import { type Transaction } from 'kysely'
import db from './db'
import type Database from './db/model'
import { type LoadoutKillData } from './types'

export async function createOrRunInTransaction (callback: (trx: Transaction<Database>) => Promise<void>, trx?: Transaction<Database>) {
  if (trx) {
    await callback(trx)
  } else {
    await db
      .transaction()
      .setIsolationLevel('serializable')
      .execute(callback)
  }
}

export async function checkUpdateOrCreatePlayer (data: {
  id: number
  name: string
}) {
  await db
    .transaction()
    .setIsolationLevel('serializable')
    .execute(async (trx) => {
      const player = await trx
        .selectFrom('ToneAPI_v3.player')
        .select(['player_name'])
        .where('player_id', '=', data.id)
        .executeTakeFirst()
      if (!player) {
        await trx
          .insertInto('ToneAPI_v3.player')
          .values({
            player_id: data.id,
            player_name: data.name
          })
          .execute()
      } else if (player.player_name !== data.name) {
        await trx
          .updateTable('ToneAPI_v3.player')
          .set({ player_name: data.name })
          .where('ToneAPI_v3.player.player_id', '=', data.id)
          .execute()
      }
    })
}

export async function checkOrCreateWeapon (weaponID: string, trx?: Transaction<Database>) {
  const runner = async (trx: Transaction<Database>) => {
    const weapon = await trx
      .selectFrom('ToneAPI_v3.weapon')
      .select('ToneAPI_v3.weapon.weapon_id')
      .where('weapon_id', '=', weaponID)
      .executeTakeFirst()
    if (!weapon) {
      await trx
        .insertInto('ToneAPI_v3.weapon')
        .values({
          weapon_id: weaponID
        })
        .execute()
    }
  }

  await createOrRunInTransaction(runner, trx)
}

export async function checkOrCreateWeaponMods (weapon: {
  id: string
  mods: number
}, trx?: Transaction<Database>) {
  const runner = async (trx: Transaction<Database>) => {
    await checkOrCreateWeapon(weapon.id, trx)
    const weaponMods = await trx
      .selectFrom('ToneAPI_v3.mods_on_weapon')
      .select('ToneAPI_v3.mods_on_weapon.mod_id')
      .where('mod_id', '=', weapon.mods)
      .where('weapon_id', '=', weapon.id)
      .executeTakeFirst()
    if (!weaponMods) {
      await trx
        .insertInto('ToneAPI_v3.mods_on_weapon')
        .values({
          mod_id: weapon.mods,
          weapon_id: weapon.id,
          autogenerated: true
        })
        .execute()
    }
  }

  await createOrRunInTransaction(runner, trx)
}

export async function checkOrCreateTitan (titanID: string | null, trx?: Transaction<Database>) {
  if (titanID == null) {
    return
  }
  const runner = async (trx: Transaction<Database>) => {
    const titan = await trx
      .selectFrom('ToneAPI_v3.titan_chassis')
      .select('ToneAPI_v3.titan_chassis.titan_id')
      .where('titan_id', '=', titanID)
      .executeTakeFirst()
    if (!titan) {
      await trx
        .insertInto('ToneAPI_v3.titan_chassis')
        .values({
          titan_id: titanID
        })
        .execute()
    }
  }

  await createOrRunInTransaction(runner, trx)
}

export async function checkOrCreateLoadout (loadoutData: LoadoutKillData) {
  const loadout = await db
    .transaction()
    .setIsolationLevel('serializable')
    .execute(async (trx) => {
      const loadout = await trx
        .selectFrom('ToneAPI_v3.loadout')
        .select('ToneAPI_v3.loadout.loadout_id')
        .where('primary_weapon', loadoutData.primary?.id !== undefined ? '=' : 'is', loadoutData.primary?.id ?? null)
        .where('primary_mod_id', loadoutData.primary?.mods !== undefined ? '=' : 'is', loadoutData.primary?.mods ?? null)
        .where('secondary_weapon', loadoutData.secondary?.id !== undefined ? '=' : 'is', loadoutData.secondary?.id ?? null)
        .where('secondary_mod_id', loadoutData.secondary?.mods !== undefined ? '=' : 'is', loadoutData.secondary?.mods ?? null)
        .where('anti_titan_weapon', loadoutData.anti_titan?.id !== undefined ? '=' : 'is', loadoutData.anti_titan?.id ?? null)
        .where('anti_titan_mod_id', loadoutData.anti_titan?.mods !== undefined ? '=' : 'is', loadoutData.anti_titan?.mods ?? null)
        .where('ordnance', loadoutData.ordnance?.id !== undefined ? '=' : 'is', loadoutData.ordnance?.id ?? null)
        .where('tactical', loadoutData.tactical?.id !== undefined ? '=' : 'is', loadoutData.tactical?.id ?? null)
        .where('pilot_passive_1', loadoutData.passive1 !== undefined ? '=' : 'is', loadoutData.passive1 ?? null)
        .where('pilot_passive_2', loadoutData.passive2 !== undefined ? '=' : 'is', loadoutData.passive2 ?? null)
        .where('titan_id', loadoutData.titan !== undefined ? '=' : 'is', loadoutData.titan ?? null)
        .executeTakeFirst()
      if (!loadout) {
        if (loadoutData.primary !== undefined) {
          await checkOrCreateWeaponMods(loadoutData.primary, trx)
        }
        if (loadoutData.secondary !== undefined) {
          await checkOrCreateWeaponMods(loadoutData.secondary, trx)
        }
        if (loadoutData.anti_titan !== undefined) {
          await checkOrCreateWeaponMods(loadoutData.anti_titan, trx)
        }
        if (loadoutData.ordnance !== undefined) {
          await checkOrCreateWeapon(loadoutData.ordnance.id, trx)
        }
        if (loadoutData.titan !== undefined) {
          await checkOrCreateTitan(loadoutData.titan, trx)
        }
        const result = await trx
          .insertInto('ToneAPI_v3.loadout')
          .values({
            primary_weapon: loadoutData.primary?.id ?? null,
            primary_mod_id: loadoutData.primary?.mods ?? null,
            secondary_weapon: loadoutData.secondary?.id ?? null,
            secondary_mod_id: loadoutData.secondary?.mods ?? null,
            anti_titan_weapon: loadoutData.anti_titan?.id ?? null,
            anti_titan_mod_id: loadoutData.anti_titan?.mods ?? null,
            ordnance: loadoutData.ordnance?.id ?? null,
            tactical: loadoutData.tactical?.id ?? null,
            pilot_passive_1: loadoutData.passive1,
            pilot_passive_2: loadoutData.passive2,
            titan_id: loadoutData.titan
          })
          .returning('ToneAPI_v3.loadout.loadout_id')
          .executeTakeFirstOrThrow()
        return result
      }
      return loadout
    })
  if (!loadout) {
    throw Error('loadout is undefined')
  }
  return loadout.loadout_id
}
